struct Node{
    Node* arr[26];
    bool flag;
     
    bool contains(char c)
    {
        return (arr[c - 'a'] != NULL);
    }
    
    void put(char c , Node* newNode)
    {
        arr[c - 'a'] = newNode;
    }
    
    Node* getNext(char c)
    {
        return arr[c - 'a'];
    }
    
    void setFlag()
    {
        flag = true;
    }
};
class Trie {
    Node* root = new Node();
public:
    Trie() {
        
    }
    
    void insert(string word) {
        Node* temp = root;
        for(int i = 0; i < word.size(); i++)
        {
            if(!temp->contains(word[i]))
            {
                Node* newNode = new Node();
                temp->put(word[i] , newNode);
            }
            temp = temp->getNext(word[i]);
        }
        temp->setFlag();
    }
    
    bool search(string word) {
        Node* temp = root;
        for(int i = 0; i < word.size(); i++)
        {
            if(temp->contains(word[i]))
            {
               temp = temp->getNext(word[i]);
            }
            else
                return false;
        }
        if(temp->flag == true)
            return true;
        return false;
    }
    
    bool startsWith(string prefix) {
        
        Node* temp = root;
        for(int i = 0; i < prefix.size(); i++)
        {
            if(temp->contains(prefix[i]))
            {
               temp = temp->getNext(prefix[i]);
            }
            else
                return false;
        }
        return true;
    }
};
