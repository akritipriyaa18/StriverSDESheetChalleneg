 //Optimal Approach
    vector<vector<int>> threeSum(vector<int>& nums) {
     
        sort(nums.begin() , nums.end());
        vector<vector<int>>v;
        
        if(nums.size() == 0 || nums.size() < 3)
            return v;
        
        for(int i = 0; i < nums.size() - 2; i++)
        {
            if(i == 0 || (i > 0 && nums[i] != nums[i - 1]))
            {
                  int a = nums[i];
                  int low = i + 1;
                  int high = nums.size() - 1;
                  int sum = 0 - a;
            
            while(low < high)
            {
                if(nums[low] + nums[high] == sum)
                {
                    vector<int>temp = {a , nums[low] , nums[high]};
                    v.push_back(temp);
                    
                     while(low < high && nums[low] == nums[low + 1])
                        low++;
                     while(low < high && nums[high] == nums[high - 1])
                        high--;
                
                    low++;
                    high--;
                }
                
                else if(nums[low] + nums[high] < sum)
                    low++;
                else
                    high--;
            }
            }
          
        }
        return v;
    }
