Better Approach than Brute Force:

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
         
        if(headA == NULL && headB == NULL)
            return NULL;
        
        unordered_set<ListNode*>s;
        
        while(headA != NULL)
        {
            s.insert(headA);
            headA = headA->next;
        }
        
        while(headB != NULL)
        {
            if(s.find(headB) != s.end())
                return headB;
            else
                s.insert(headB);
            headB = headB->next;
        }
       return 0; 
    }
    
    
    
    
    Optimal 1:
    
    int add(ListNode* head)
    {
        int count = 0;
        while(head != NULL)
        {
            count++;
            head = head->next;
        }
        return count;
    }
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
         
        if(headA == NULL && headB == NULL)
            return NULL;
        
        int l1 = add(headA);
        int l2 = add(headB);
        
        int l = abs(l1 - l2);
        
        if(l1 > l2)
        {
            while(l--)
            {
                headA = headA->next;
            }
        }
        else{
            while(l--)
            {
                headB = headB->next;
            }
        }
        
        while(headA && headB)
        {
            if(headA == headB)
                return headA;
            headA = headA->next;
            headB = headB->next;
        }
        
        return 0;
    }
    
    //Optimal2
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
         
        if(headA == NULL && headB == NULL)
            return NULL;
        
        ListNode* a = headA;
        ListNode* b = headB;
        
        while(a != b)
        {
            a = a == NULL ? headB : a->next;
            b = b == NULL ? headA : b->next;
        }
        return a;
    }
